"""model.py: Contains the core model for the ACE program."""

import spacy
from spacy.matcher import Matcher


class ACEModel:
    """The main model for the ACE program.

    This class is responsible for processing user input, interacting with data
    (e.g. a database, external APIs, or internal knowledge bases), and generating
    responses. It represents the core intelligence of ACE.
    """

    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")
        self.matcher = Matcher(self.nlp.vocab)
        self._define_intents()

    def __call__(self, user_input: str) -> str:
        """Processes the user's input and generates a response.

        ### Args
            user_input (str): The user's input to process.

        ### Returns
            str: The response generated by the model.
        """
        doc = self.nlp(user_input)
        matches = self.matcher(doc)

        # Find the best match
        for match_id, _, _ in matches:
            intent_name = self.nlp.vocab.strings[match_id]
            for intent in self.intents:
                if intent["name"] == intent_name:
                    return intent["response"]

        return "Sorry, I don't understand."

    def _define_intents(self):
        """Defines the intents and their corresponding patterns and responses."""
        self.intents = [
            {
                "name": "Greeting",
                "patterns": [
                    [{"LOWER": "hello"}],
                    [{"LOWER": "hi"}],
                    [{"LOWER": "hey"}],
                    [{"LOWER": "greetings"}],
                    [{"LOWER": "good"}, {"LOWER": "morning"}],
                    [{"LOWER": "good"}, {"LOWER": "afternoon"}],
                    [{"LOWER": "good"}, {"LOWER": "evening"}],
                ],
                "response": "Hello! How can I assist you today?",
            },
            {
                "name": "Identity",
                "patterns": [
                    [
                        {"LOWER": "what"},
                        {"LOWER": "is"},
                        {"LOWER": "your"},
                        {"LOWER": "name"},
                    ],
                    [{"LOWER": "who"}, {"LOWER": "are"}, {"LOWER": "you"}],
                    [{"LOWER": "your"}, {"LOWER": "name"}],
                ],
                "response": "I am ACE, your personal assistant.",
            },
        ]

        # Add patterns to the matcher
        for intent in self.intents:
            self.matcher.add(intent["name"], intent["patterns"])
